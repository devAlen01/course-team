// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model Course {
  id          String       @id @default(uuid())
  title       String     
  description String?     
  youtubeUrl  String 
  price       String  
  category    String   @default("Uncategorized")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String      
  author      User        @relation("CreatedCourses", fields: [createdBy], references: [id])
  enrollments Enrollment[] 
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String   
  courseId  String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) 
}

model User {
   id           String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String?
  avatarUrl     String?
  role          Role      @default(USER)
  tokens        Token[]
  createdCourses Course[]     @relation("CreatedCourses") // Созданные админом курсы
  enrollments    Enrollment[] @relation("UserEnrollments") // Курсы, на которые записан студент
}

model Token {
  id          String    @id @default(uuid())
  token       String    @unique
  expires     DateTime
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}


enum Role {
  ADMIN
  USER
}